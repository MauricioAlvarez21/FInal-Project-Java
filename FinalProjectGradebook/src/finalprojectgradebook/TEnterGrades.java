/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package finalprojectgradebook;
import java.io.File;
import java.io.IOException;
import java.io.FileWriter; 
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author edith
 */
public class TEnterGrades extends javax.swing.JFrame {

    /**
     * Creates new form TEnterGrades
     */
    public TEnterGrades() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ErrorMessage = new javax.swing.JLabel();
        TEGID1 = new javax.swing.JTextField();
        TEGID2 = new javax.swing.JTextField();
        TEGID3 = new javax.swing.JTextField();
        TEGID4 = new javax.swing.JTextField();
        TEGID5 = new javax.swing.JTextField();
        TEGNG1 = new javax.swing.JSpinner();
        TEGNG2 = new javax.swing.JSpinner();
        TEGNG3 = new javax.swing.JSpinner();
        TEGNG4 = new javax.swing.JSpinner();
        TEGNG5 = new javax.swing.JSpinner();
        ClassID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        TeacherID = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Return");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Enter the Grades");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Class ID:");

        jLabel2.setText("Student ID");

        jLabel3.setText("New Grade");

        jLabel4.setText("Teacher ID:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ClassID, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TeacherID, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton2)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(21, 21, 21)
                                    .addComponent(jLabel2)))
                            .addComponent(TEGID1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TEGID5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TEGID4, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TEGID3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TEGID2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jButton1))
                        .addGap(85, 85, 85))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TEGNG1, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(TEGNG2)
                            .addComponent(TEGNG3)
                            .addComponent(TEGNG4)
                            .addComponent(TEGNG5))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ClassID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(TeacherID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TEGID1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TEGNG1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TEGID2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TEGNG2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TEGID3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TEGNG3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TEGID4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TEGNG4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TEGID5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TEGNG5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ErrorMessage)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Teacher1 obj = new  Teacher1();
        obj.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    boolean ifContains(String a, String b){
     boolean doesIt = a.contains(b);
     return doesIt;
    }
    char LetterGrade(int x){
    if (x >= 9){
      return 'A';
    }
    else if (x >= 8){
      return 'B';
    }
    else if (x >= 7){
      return 'C';
    }
    else if (x >= 6){
      return 'D';
    }
    else {
      return 'F';
    }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    String Student1File = "S-"+TEGID1.getText() + ".txt";
    String Student2File = "S-"+TEGID2.getText() + ".txt";
    String Student3File = "S-"+TEGID3.getText() + ".txt";
    String Student4File = "S-"+TEGID4.getText() + ".txt"; 
    String Student5File = "S-"+TEGID5.getText() + ".txt";
    String TeacherFile = "T-"+TeacherID.getText() + ".txt";
    String ClassFile = "Z-"+ClassID.getText() + ".txt";
    BufferedReader reader = null;
    // Create a new instance of the BufferedWriter class
    BufferedWriter writer = null;
    try {
      reader = new BufferedReader(new FileReader(Student1File));
      writer = new BufferedWriter(new FileWriter(Student1File, true));
      String line = reader.readLine();
      while (line != null) {
        if (ifContains(line,ClassID.getText())){
        line = line.replace(line.substring(line.length()-2,line.length()),String.valueOf(LetterGrade((int)TEGNG1.getValue())));
        writer.write(line);
        writer.newLine();        
        }
        line = reader.readLine();
      }
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        if (reader != null) {
          reader.close();
        }
        if (writer != null) {
          writer.close();
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
    try {
      reader = new BufferedReader(new FileReader(Student2File));
      writer = new BufferedWriter(new FileWriter(Student2File, true));
      String line = reader.readLine();
      while (line != null) {
        if (ifContains(line,ClassID.getText())){
        line = line.replace(line.substring(line.length()-2,line.length()),String.valueOf(LetterGrade((int)TEGNG2.getValue())));
        writer.write(line);
        writer.newLine();        
        }
        line = reader.readLine();
      }
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        if (reader != null) {
          reader.close();
        }
        if (writer != null) {
          writer.close();
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
    try {
      reader = new BufferedReader(new FileReader(Student3File));
      writer = new BufferedWriter(new FileWriter(Student3File, true));
      String line = reader.readLine();
      while (line != null) {
        if (ifContains(line,ClassID.getText())){
        line = line.replace(line.substring(line.length()-2,line.length()),String.valueOf(LetterGrade((int)TEGNG3.getValue())));
        writer.write(line);
        writer.newLine();        
        }
        line = reader.readLine();
      }
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        if (reader != null) {
          reader.close();
        }
        if (writer != null) {
          writer.close();
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
    try {
      reader = new BufferedReader(new FileReader(Student4File));
      writer = new BufferedWriter(new FileWriter(Student4File, true));
      String line = reader.readLine();
      while (line != null) {
        if (ifContains(line,ClassID.getText())){
        line = line.replace(line.substring(line.length()-2,line.length()),String.valueOf(LetterGrade((int)TEGNG4.getValue())));
        writer.write(line);
        writer.newLine();        
        }
        line = reader.readLine();
      }
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        if (reader != null) {
          reader.close();
        }
        if (writer != null) {
          writer.close();
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
    try {
      reader = new BufferedReader(new FileReader(Student5File));
      writer = new BufferedWriter(new FileWriter(Student5File, true));
      String line = reader.readLine();
      while (line != null) {
        if (ifContains(line,ClassID.getText())){
        line = line.replace(line.substring(line.length()-2,line.length()),String.valueOf(LetterGrade((int)TEGNG5.getValue())));
        writer.write(line);
        writer.newLine();        
        }
        line = reader.readLine();
      }
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        if (reader != null) {
          reader.close();
        }
        if (writer != null) {
          writer.close();
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
    try {
      reader = new BufferedReader(new FileReader(TeacherFile));
      writer = new BufferedWriter(new FileWriter(TeacherFile, true));
      String line = reader.readLine();
      while (line != null) {
        if (ifContains(line,TEGID1.getText())){
        line = line.replace(line.substring(line.length()-2,line.length()),String.valueOf(LetterGrade((int)TEGNG1.getValue())));
        writer.write(line);
        writer.newLine();        
        }
        line = reader.readLine();
      }
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        if (reader != null) {
          reader.close();
        }
        if (writer != null) {
          writer.close();
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
    try {
      reader = new BufferedReader(new FileReader(TeacherFile));
      writer = new BufferedWriter(new FileWriter(TeacherFile, true));
      String line = reader.readLine();
      while (line != null) {
        if (ifContains(line,TEGID2.getText())){
        line = line.replace(line.substring(line.length()-2,line.length()),String.valueOf(LetterGrade((int)TEGNG2.getValue())));
        writer.write(line);
        writer.newLine();        
        }
        line = reader.readLine();
      }
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        if (reader != null) {
          reader.close();
        }
        if (writer != null) {
          writer.close();
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
    try {
      reader = new BufferedReader(new FileReader(TeacherFile));
      writer = new BufferedWriter(new FileWriter(TeacherFile, true));
      String line = reader.readLine();
      while (line != null) {
        if (ifContains(line,TEGID3.getText())){
        line = line.replace(line.substring(line.length()-2,line.length()),String.valueOf(LetterGrade((int)TEGNG3.getValue())));
        writer.write(line);
        writer.newLine();        
        }
        line = reader.readLine();
      }
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        if (reader != null) {
          reader.close();
        }
        if (writer != null) {
          writer.close();
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
    try {
      reader = new BufferedReader(new FileReader(TeacherFile));
      writer = new BufferedWriter(new FileWriter(TeacherFile, true));
      String line = reader.readLine();
      while (line != null) {
        if (ifContains(line,TEGID4.getText())){
        line = line.replace(line.substring(line.length()-2,line.length()),String.valueOf(LetterGrade((int)TEGNG4.getValue())));
        writer.write(line);
        writer.newLine();        
        }
        line = reader.readLine();
      }
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        if (reader != null) {
          reader.close();
        }
        if (writer != null) {
          writer.close();
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
    try {
      reader = new BufferedReader(new FileReader(TeacherFile));
      writer = new BufferedWriter(new FileWriter(TeacherFile, true));
      String line = reader.readLine();
      while (line != null) {
        if (ifContains(line,TEGID5.getText())){
        line = line.replace(line.substring(line.length()-2,line.length()),String.valueOf(LetterGrade((int)TEGNG5.getValue())));
        writer.write(line);
        writer.newLine();        
        }
        line = reader.readLine();
      }
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        if (reader != null) {
          reader.close();
        }
        if (writer != null) {
          writer.close();
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
      try {
      reader = new BufferedReader(new FileReader(ClassFile));
      writer = new BufferedWriter(new FileWriter(ClassFile, true));
      String line = reader.readLine();
      while (line != null) {
        if (ifContains(line,TEGID1.getText())){
        line = line.replace(line.substring(line.length()-2,line.length()),String.valueOf(LetterGrade((int)TEGNG1.getValue())));
        writer.write(line);
        writer.newLine();        
        }
        line = reader.readLine();
      }
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        if (reader != null) {
          reader.close();
        }
        if (writer != null) {
          writer.close();
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
      try {
      reader = new BufferedReader(new FileReader(ClassFile));
      writer = new BufferedWriter(new FileWriter(ClassFile, true));
      String line = reader.readLine();
      while (line != null) {
        if (ifContains(line,TEGID2.getText())){
        line = line.replace(line.substring(line.length()-2,line.length()),String.valueOf(LetterGrade((int)TEGNG2.getValue())));
        writer.write(line);
        writer.newLine();        
        }
        line = reader.readLine();
      }
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        if (reader != null) {
          reader.close();
        }
        if (writer != null) {
          writer.close();
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
      try {
      reader = new BufferedReader(new FileReader(ClassFile));
      writer = new BufferedWriter(new FileWriter(ClassFile, true));
      String line = reader.readLine();
      while (line != null) {
        if (ifContains(line,TEGID3.getText())){
        line = line.replace(line.substring(line.length()-2,line.length()),String.valueOf(LetterGrade((int)TEGNG3.getValue())));
        writer.write(line);
        writer.newLine();        
        }
        line = reader.readLine();
      }
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        if (reader != null) {
          reader.close();
        }
        if (writer != null) {
          writer.close();
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
      try {
      reader = new BufferedReader(new FileReader(ClassFile));
      writer = new BufferedWriter(new FileWriter(ClassFile, true));
      String line = reader.readLine();
      while (line != null) {
        if (ifContains(line,TEGID4.getText())){
        line = line.replace(line.substring(line.length()-2,line.length()),String.valueOf(LetterGrade((int)TEGNG4.getValue())));
        writer.write(line);
        writer.newLine();        
        }
        line = reader.readLine();
      }
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        if (reader != null) {
          reader.close();
        }
        if (writer != null) {
          writer.close();
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
      try {
      reader = new BufferedReader(new FileReader(ClassFile));
      writer = new BufferedWriter(new FileWriter(ClassFile, true));
      String line = reader.readLine();
      while (line != null) {
        if (ifContains(line,TEGID5.getText())){
        line = line.replace(line.substring(line.length()-2,line.length()),String.valueOf(LetterGrade((int)TEGNG5.getValue())));
        writer.write(line);
        writer.newLine();        
        }
        line = reader.readLine();
      }
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        if (reader != null) {
          reader.close();
        }
        if (writer != null) {
          writer.close();
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }

    // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TEnterGrades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TEnterGrades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TEnterGrades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TEnterGrades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TEnterGrades().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ClassID;
    private javax.swing.JLabel ErrorMessage;
    private javax.swing.JTextField TEGID1;
    private javax.swing.JTextField TEGID2;
    private javax.swing.JTextField TEGID3;
    private javax.swing.JTextField TEGID4;
    private javax.swing.JTextField TEGID5;
    private javax.swing.JSpinner TEGNG1;
    private javax.swing.JSpinner TEGNG2;
    private javax.swing.JSpinner TEGNG3;
    private javax.swing.JSpinner TEGNG4;
    private javax.swing.JSpinner TEGNG5;
    private javax.swing.JTextField TeacherID;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
